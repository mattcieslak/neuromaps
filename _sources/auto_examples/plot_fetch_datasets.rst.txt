
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_fetch_datasets.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_fetch_datasets.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_fetch_datasets.py:


Fetching atlases and annotations
================================

This example demonstrates how to use :mod:`neuromaps.datasets` to fetch
atlases and annotations.

.. GENERATED FROM PYTHON SOURCE LINES 11-18

Much of the functionality of the ``neuromaps`` toolbox relies on the
atlases and atlas files provided with it. In many cases these atlases are
fetched "behind-the-scenes" when you call functions that depend on them, but
they can be accessed directly.

There is a general purpose :func:`neuromaps.datasets.fetch_atlas`
function that can fetch any of the atlases provided with ``neuromaps``:

.. GENERATED FROM PYTHON SOURCE LINES 18-24

.. code-block:: default


    from neuromaps import datasets

    fslr = datasets.fetch_atlas(atlas='fslr', density='32k')
    print(fslr.keys())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Downloading data from https://files.osf.io/v1/resources/4mw3a/providers/osfstorage/60b684b53a6df1021bd4df2d ...
     ...done. (2 seconds, 0 min)
    Extracting data from /home/runner/neuromaps-data/ac53e497d7d6c6379ee7bd7bda6e0267/fsLR32k.tar.gz..... done.
    dict_keys(['midthickness', 'inflated', 'veryinflated', 'sphere', 'medial', 'sulc', 'vaavg'])




.. GENERATED FROM PYTHON SOURCE LINES 25-30

The values corresponding to the keys of the atlas dictionary are length-2
lists containing filepaths to the downloaded data. All surface atlas files
are provide in gifti format (whereas MNI files are in gzipped nifti format).

You can load them directly with ``nibabel`` to confirm their validity:

.. GENERATED FROM PYTHON SOURCE LINES 30-36

.. code-block:: default


    import nibabel as nib
    lsphere, rsphere = fslr['sphere']
    lvert, ltri = nib.load(lsphere).agg_data()
    print(lvert.shape, ltri.shape)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    (32492, 3) (64980, 3)




.. GENERATED FROM PYTHON SOURCE LINES 37-41

The other datasets that are provided with ``neuromaps`` are annotations
(i.e., brain maps!). While we are slowly making more and more of these openly
available, for now only a subset are accessible to the general public; these
are returned by default via :func:`datasets.available_annotations`.

.. GENERATED FROM PYTHON SOURCE LINES 41-45

.. code-block:: default


    annotations = datasets.available_annotations()
    print(f'Available annotations: {len(annotations)}')





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Available annotations: 78




.. GENERATED FROM PYTHON SOURCE LINES 46-50

The :func:`~.available_annotations` function accepts a number of keyword
arguments that you can use to query specific datasets. For example, providing
the `format='volume`' argument will return only those annotations that
are, by default, a volumetric image:

.. GENERATED FROM PYTHON SOURCE LINES 50-54

.. code-block:: default


    volume_annotations = datasets.available_annotations(format='volume')
    print(f'Available volumetric annotations: {len(volume_annotations)}')





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Available volumetric annotations: 39




.. GENERATED FROM PYTHON SOURCE LINES 55-61

There are a number of keyword arguments we can specify to reduce the scope of
the annotations returned. Here, `source` specifies where the annotation came
from (i.e., a dataset from a manuscript or a data repository or toolbox),
`desc` refers to a brief description of the annotation, `space` clarifies
which space the annotation is in, and `den` (specific to surface annotations)
clarifies the density of the surface on which the annotation is defined:

.. GENERATED FROM PYTHON SOURCE LINES 61-66

.. code-block:: default


    annot = datasets.available_annotations(source='abagen', desc='genepc1',
                                           space='fsaverage', den='10k')
    print(annot)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [('abagen', 'genepc1', 'fsaverage', '10k')]




.. GENERATED FROM PYTHON SOURCE LINES 67-70

Annotations also have tags to help sort them into categories. You can see
what tags can be used to query annotations with the :func:`~.available_tags`
functions:

.. GENERATED FROM PYTHON SOURCE LINES 70-74

.. code-block:: default


    tags = datasets.available_tags()
    print(tags)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    ['ASL', 'MEG', 'MRI', 'PET', 'fMRI', 'functional', 'genetics', 'meta-analysis', 'receptors', 'structural']




.. GENERATED FROM PYTHON SOURCE LINES 75-78

Tags can be used as a keyword argumnet with :func:`~.available_annotations`.
You can supply either a single tag or a list of tags. Note that supplying a
list will only return those annotations that match ALL supplied tags:

.. GENERATED FROM PYTHON SOURCE LINES 78-82

.. code-block:: default


    fmri_annotations = datasets.available_annotations(tags='fMRI')
    print(fmri_annotations)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [('margulies2016', 'fcgradient01', 'fsLR', '32k'), ('margulies2016', 'fcgradient02', 'fsLR', '32k'), ('margulies2016', 'fcgradient03', 'fsLR', '32k'), ('margulies2016', 'fcgradient04', 'fsLR', '32k'), ('margulies2016', 'fcgradient05', 'fsLR', '32k'), ('margulies2016', 'fcgradient06', 'fsLR', '32k'), ('margulies2016', 'fcgradient07', 'fsLR', '32k'), ('margulies2016', 'fcgradient08', 'fsLR', '32k'), ('margulies2016', 'fcgradient09', 'fsLR', '32k'), ('margulies2016', 'fcgradient10', 'fsLR', '32k'), ('mueller2013', 'intersubjvar', 'fsLR', '164k'), ('neurosynth', 'cogpc1', 'MNI152', '2mm')]




.. GENERATED FROM PYTHON SOURCE LINES 83-91

Once we have an annotation that we want we can use the
:func:`neuromaps.datasets.fetch_annotation` to actually download the
files. This has a very similar signature to the
:func:`~.available_annotations` function, accepting almost all the same
keyword arguments to specify which annotations are desired.

Here, we'll grab the first principal component of gene expression across the
brain (from the Allen Human Brain Atlas):

.. GENERATED FROM PYTHON SOURCE LINES 91-95

.. code-block:: default


    abagen = datasets.fetch_annotation(source='abagen', desc='genepc1')
    print(abagen)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Downloading data from https://files.osf.io/v1/resources/4mw3a/providers/osfstorage/60c2290118f70b01fca797eb ...
     ...done. (1 seconds, 0 min)
    Downloading data from https://files.osf.io/v1/resources/4mw3a/providers/osfstorage/60c228f5f3ce9401fa24e521 ...
     ...done. (1 seconds, 0 min)
    ['/home/runner/neuromaps-data/annotations/abagen/genepc1/fsaverage/source-abagen_desc-genepc1_space-fsaverage_den-10k_hemi-L_feature.func.gii', '/home/runner/neuromaps-data/annotations/abagen/genepc1/fsaverage/source-abagen_desc-genepc1_space-fsaverage_den-10k_hemi-R_feature.func.gii']




.. GENERATED FROM PYTHON SOURCE LINES 96-100

Notice that the returned annotation ``abagen`` is a dictionary. We can subset
the dictionary with the appropriate key or, if we know that our query is
going to return only one annotation, also provide the `return_single=True`
argument to the fetch call:

.. GENERATED FROM PYTHON SOURCE LINES 100-105

.. code-block:: default


    abagen = datasets.fetch_annotation(source='abagen', desc='genepc1',
                                       return_single=True)
    print(abagen)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    ['/home/runner/neuromaps-data/annotations/abagen/genepc1/fsaverage/source-abagen_desc-genepc1_space-fsaverage_den-10k_hemi-L_feature.func.gii', '/home/runner/neuromaps-data/annotations/abagen/genepc1/fsaverage/source-abagen_desc-genepc1_space-fsaverage_den-10k_hemi-R_feature.func.gii']




.. GENERATED FROM PYTHON SOURCE LINES 106-109

And that's it! This example provided a quick overview on how to fetch the
various atlases and datasets provided with ``neuromaps``. For more
information please refer to the :ref:`API reference <ref_datasets>`.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.058 seconds)


.. _sphx_glr_download_auto_examples_plot_fetch_datasets.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_fetch_datasets.py <plot_fetch_datasets.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_fetch_datasets.ipynb <plot_fetch_datasets.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
